#!/usr/bin/python
#
# (C)opyright Xelerance 2007 2008, Paul Wouters <paul@xelerance.com>
#
# TODO: allow specifying config files and / or prefixes 

import commands
import re
import os
import sys
import getopt
global namedconf
namedconf = "/etc/named.conf"
global unboundconf 
unboundconf = "/var/lib/unbound/unbound.conf"

def usage():
	print "dnssec-configure: (re)configure the Bind and/or Unbound nameserver for DNSSEC and DLV"
	print "usage: dnssec-configure [-u] [-b] [--dnssec= <on|off>] --dlv= <off| on [dlvzone]>"
	print "                        [--production] [--testing] [--harvest] [--root]"
	print "examples:"
	print "          dnssec-configure -u -b --dnssec=on --dlv=dlv.isc.org --production"
	print "          dnsec-configure --dnssec=on -dlv=on --production --testing --harvest"
	print "          dnssec-configure --dnssec=off -dlv=off"
        
	print "          -b or -n                 = (re)configure the Bind nameserver (default yes if found)"
	print "          -u                       = (re)configure the Unbound nameserver (default yes if found)"
	print "          --dnssec <on|of>          = enable or disable DNSSEC"
	print "          --dlv <off|on|dlvname>    = enable or disable DLV (default dlv as specified with 'on' is dlv.isc.org)" 
	print "          --basedir                = basedir for key files, default is /etc/pki/dnssec-keys/"
	print "          --production             = load production keys into configuration (default yes)"
	print "          --testing                = load testing keys into configuration (default no)"
	print "          --harvest                = load harvest keys into configuration (default no)"
	print "          --root                   = load root key into configuration [not yet implemented]"

def main(argv=None):
	if commands.getoutput( "whoami" ) != "root":
		sys.exit( "Must be root!" )

	if argv is None:
		argv = sys.argv
	try:
		opts, args = getopt.getopt(argv[1:], "bnuvh1:2:3:4567", ["bind","named", "unbound", "version","help","dnssec=","dlv=","basedir=","production","testing","harvest","root"])
	except getopt.error, msg:
		#print >>sys.stderr, err.msg
		print >>sys.stderr, "ERROR parsing options"
		usage()
		sys.exit(2)

	# parse options
	dlvzone = "dlv.isc.org"
	basedir = "/etc/pki/dnssec-keys/"
	# Using conf files for 'grep' will cause failure when using
	# includes, so we need to go through those as well
	bind = 0
	unbound = 0
	dnssec = -1
	dlv = -1
	production = ""
	testing = ""
	harvest = ""
	root = ""
	hack = 0
	for o, a in opts:
		hack = 1
		if o in ("-v", "--version"):
			print "dnssec-configure version 0.1 "
			print "Author:\n Paul Wouters <paul@xelerance.com>"
			print "Source : http://www.xelerance.com/software/dnssec-keys/"
			sys.exit()
		if o in ("-h", "--help"):
			usage()
			sys.exit()

		if o in ("-n","--named","-b","--bind"):
			bind = 1
		if o in ("-u","--unbound"):
			unbound = 1
		if o in ("-3","--basedir"):
			if not a:
				print "error: basedir requires argument"
				usage()
				sys.exit()
			else:
				basedir = a
		if o in ("--production"):
			production = 1
		if o in ("--testing"):
			testing = 1
		if o in ("--harvest"):
			harvest = 1
		if o in ("--root"):
			root = 1

		if o in ("-1","--dnssec"):
			if not a:
				print "error: no dnssec mode specified"
				usage()
				sys.exit()
			else:
				if a == "on":
					dnssec = 1
				elif a == "off":
					dnssec = 0
				else:
					print "error: dnssec can only be 'on' or 'off'"
					usage()
					sys.exit()
		if o in ("-2","--dlv"):
			if not a:
				print "error: no dlv mode specified"
				usage()
				sys.exit()
			else:
				if a == "on":
					dlv = 1
				elif a == "off":
					dlv = 0
				else:
					dlv = 1
					print "dlvzone set to %s"%a
					dlvzone = a
	if not bind and not unbound:
		# nothing specified, default is both
		bind = 1
		unbound = 1
	if dlv == -1:
		print "error: dlv setting not specified"
		usage()
		sys.exit()
	if dnssec == -1:
		print "error: dnssec setting not specified"
		usage()
		sys.exit()

	if not hack:
		usage()
		sys.exit()

	if args:
		print "error:unknown arguments specified"
		usage()
		sys.exit()

	software = []
	if bind:
		software.append("named")
	if unbound:
		software.append("unbound")
	software = ",".join(software)

	if dnssec:
		# create conffiles string to include
		conffiles = ""
		if production: conffiles = conffiles + basedir + "/production.conf"
		if testing: conffiles = conffiles + basedir + "/testing.conf"
		if harvest: conffiles = conffiles + basedir + "/harvest.conf"
		if root: conffiles = conffiles + basedir + "/root.conf"
		if not dlv:
			dlvzone = ""
		else:
			# fix dots, eg ".arpa" and "arpa" to "arpa."
			if dlvzone != ".":
				if dlvzone[-1] != ".":
					dlvzone = dlvzone + "."
				if dlvzone[0] == ".":
					dlvzone = dlvzone[1:]

		print "Enabling DNSSEC for: %s\n"%software
		if bind:
			BindEnableDNSSEC(dlvzone,conffiles)
		if unbound:
			UnboundEnableDNSSEC(dlvzone,conffiles)
	else:
		print "Disabling DNSSEC for: %s\n"%software
		if bind:
			BindDisableDNSSEC(dlvzone)
		if unbound:
			UnboundDisableDNSSEC(dlvzone)

	# we modified the config files, verify and restart (not reload)
	if bind:
		checkBindConfig()
		restartDaemon("bind")
	if unbound:
		checkUnboundConfig()
		restartDaemon("unbound")

def restartDaemon(daemon):
	(status, output) = commands.getstatusoutput("/sbin/service %s restart"%daemon)
        if status:
                print "ERROR:%s"%output


def checkUnboundConfig():
	global unboundconf
	checkConfig(unboundconf,"unbound-checkconf")

def checkBindConfig():
	global namedconf
	checkConfig(namedconf,"named-checkconf")

# check will abort everything if it fails
def checkConfig(conf, checkprog):
	if not os.path.isfile(conf):
		sys.exit("ERROR: %s not found for rewrite")
	# named-checkconf better be in our path
	(status, output) = commands.getstatusoutput("%s %s"%(checkprog,conf))
	if status != 0:
		sys.exit("ERROR: syntax check for %s %s failed:%s"%(checkprog, conf,output))

# DNSSEC rewrite functions
def BindEnableDNSSEC(dlvzone,conffiles):
	checkBindConfig()
	if dlvzone:
		enableDLVBind(dlvzone)
	else:
		disableDLVBind()
	print "Enable DNSSEC for Bind(%s): not yet implemented"%conffiles

def BindDisableDNSSEC(dlvzone):
	print "not yet implemented"

def UnboundEnableDNSSEC(dlvzone,conffiles):
	if dlvzone:
		enableDLVBound(dlvzone)
	else:
		disableDLVUnbound()
	print "Enable DNSSEC for Unbound(%s): not yet implemented"%conffiles

def UnboundDisableDNSSEC(dlvzone):
	print "Disable DNSSEC for Unbound: not yet implemented"

# DLV rewrite functions
def enableDLVBind(dlvzone):
	print "Enable DLV %s for Bind: not yet implemented"%dlvzone
	print commands.getoutput("/sbin/service named try-restart")

def enableDLVUnbound(dlvzone):
	print "Enable DLV %s for Unbund: not yet implemented"%dlvzone
	print commands.getoutput("/sbin/service unbound try-restart")

def disableDLVBind():
	print "Disable DLV for Bind: not yet implemented"
	print commands.getoutput("/sbin/service named try-restart")

def disableDLVUnbound():
	print "Disable DLV for Unbund: not yet implemented"
	print commands.getoutput("/sbin/service unbound try-restart")


if __name__ == "__main__":
	sys.exit(main())


